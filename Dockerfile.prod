# ---- 1. Build Stage ----
# Esta etapa instala as dependências, copia o código-fonte e o transpila.
FROM node:18-slim AS builder

# Define o diretório de trabalho
WORKDIR /usr/src/app

# Copia os arquivos de definição de pacotes
COPY package*.json ./

# Instala TODAS as dependências de forma limpa e reprodutível a partir do lockfile.
# É mais rápido e seguro para builds automatizados do que 'npm install'.
RUN npm ci

# Copia todo o restante do código-fonte (src, .babelrc, etc.)
COPY . .

# Executa o script de build para transpilar o código para a pasta 'dist'
RUN npm run build

# ---- 2. Production Stage ----
# Esta etapa cria a imagem final, otimizada e pronta para produção.
FROM node:18-slim

# Instala as dependências de SO necessárias para o Puppeteer/Chromium rodar.
# Elas são necessárias no ambiente de execução, não apenas no build.
# Adicionado --no-install-recommends para otimizar o tamanho.
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    ca-certificates \
    fonts-liberation \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libc6 \
    libcairo2 \
    libcups2 \
    libdbus-1-3 \
    libexpat1 \
    libfontconfig1 \
    libgbm1 \
    libgcc1 \
    libglib2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libstdc++6 \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    lsb-release \
    wget \
    xdg-utils \
    # E finalmente, instala o Chromium
    chromium \
    # Limpa o cache do apt para manter a imagem pequena
    && rm -rf /var/lib/apt/lists/*

# Define o diretório de trabalho no container
WORKDIR /usr/src/app

# Copia o package.json e o package-lock.json
COPY package*.json ./

# Instala APENAS as dependências de produção, garantindo consistência com o lockfile.
RUN npm ci --omit=dev

# Copia APENAS o código transpilado (a pasta 'dist') do estágio de build.
# Isso mantém a imagem final pequena e segura, sem o código-fonte original ou devDependencies.
COPY --from=builder /usr/src/app/dist ./dist

# O comando padrão é definido no docker-compose.yml.